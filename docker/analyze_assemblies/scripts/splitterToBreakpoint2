#!/usr/bin/python

import sys
from optparse import OptionParser
import os
import pysam
import re
next_insertion_sequence_name = 0
next_deletion_sequence_name = 0
next_gap_sequence_name = 0


def getSequence(queryFasta, query_name, start, end):
    return queryFasta.fetch(reference=query_name, start=start, end=end)

def printSequenceToFile(outputFasta, name, sequence):
    outputFasta.write(">"+name+"\n")
    outputFasta.write(sequence+"\n")

def splitterToBreakpoint(contigFile,splitReadSlop,localRange,insertionOutputFasta,deletionOutputFasta,gapOutputFasta,queryFasta,refFasta,threshold):
#Define whether event is inv, del, or dup (classifying translocations as if they were local intrachromosomal events)
    if contigFile == "stdin":
        contigs = sys.stdin
    else:
        contigs = open(str(contigFile))
    for line in contigs:
        split = line.split()
        flipped = False
        chrom1 = split[0]
        start1 = int(split[1])
        end1 = int(split[2])
        chrom2 = split[3]
        start2 = int(split[4])
        end2 = int(split[5])
        ID = split[6]
        score = int(split[7])
        strand1 = split[8]
        strand2 = split[9]
        queryStart1 = int(split[10])
        queryEnd1 = int(split[11])
        queryStart2 = int(split[12])
        queryEnd2 = int(split[13])
        minNonOverlap = int(split[14])
        queryLength = int(split[15])
        if len(split) > 16: qualScores = split[16]
        else: qualScores = '*'
        input_str = '-'.join(map(str,[chrom1, start1, end1, chrom2, start2, end2, ID, queryStart1, queryEnd1, queryStart2, queryEnd2]))

        #only flip inv and trans
        if (split[0]!=split[3] or split[8]!=split[9]) and ((split[0] > split[3]) or ((split[0] == split[3]) and (int(split[1]) > int(split[4])))):
          chrom1, chrom2 = chrom2, chrom1
          start1, start2 = start2, start1
          end1, end2 = end2, end1
          strand1, strand2 = strand2, strand1
          queryStart1, queryStart2 = queryStart2, queryStart1
          queryEnd1, queryEnd2 = queryEnd2, queryEnd1

        if (queryStart1 == queryStart2):
            raise StandardError("spitterToBreakpoint cannot handle bedpe with equal starting query offsets in " + ID);

        rdist = start2 - end1
        qdist = queryStart2 - queryEnd1
        roverlap = abs(min(0, start2-end1))
        qoverlap = abs(min(0, queryStart2-queryEnd1))
        if chrom1 != chrom2:
            variant = "TRANS"
        elif strand1 != strand2: #Classifying Inversions
            if 'PAIRED=2' in  qualScores:
                variant = "INV"
            else:
                variant = 'BND'
        else:
          if strand1 == "-":   #swtich -- to ++
            start1, start2 = start2, start1
            end1, end2 = end2, end1
            flipped = True
            rdist = start2 - end1
            roverlap = abs(min(0, start2-end1))
          #sys.stderr.write(str(queryStart2)+'\t'+str(queryEnd1)+'\n')
          #sys.stderr.write('rdist='+str(rdist)+';qdist='+str(qdist)+"\n")
          if rdist >= qdist:   #del 
            if rdist > 0 and rdist - qdist > threshold:
              variant = 'DEL'
            else:
              variant = 'GAP'
          elif qdist > rdist:  #ins
            if rdist < 0 and qdist - rdist > threshold:
              variant = 'DUP'
            elif qdist > 0 and qdist - rdist > threshold:
              variant = 'INS'
            else:
              variant = 'DUP_OVERLAP'
          else:
              variant = 'UNK'
        refOlap=0
        if variant == "INV" or variant == "BND":
            if ((queryStart1 < queryStart2) and (strand1 == "-") and (strand2 == "+")) or ((queryStart1 > queryStart2) and (strand1 == "+") and (strand2 == "-")):
                breakStart1 = str(max(0,start1-splitReadSlop))
                breakEnd1 = str(start1+splitReadSlop)
                breakStart2 = str(max(0,start2-splitReadSlop)) 
                breakEnd2 = str(start2+splitReadSlop)
            elif ((queryStart1 < queryStart2) and (strand1 == "+") and (strand2 == "-")) or ((queryStart1 > queryStart2) and (strand1 == "-") and (strand2 == "+")):
                breakStart1 = str(max(0,end1-splitReadSlop))
                breakEnd1 = str(end1+splitReadSlop)
                breakStart2 = str(max(0,end2-splitReadSlop))
                breakEnd2 = str(end2+splitReadSlop)
        elif variant == "TRANS":
            breakStart1 = str(end1-splitReadSlop) #fix later
            breakEnd1 = str(end1+splitReadSlop)
            breakStart2 = str(start2-splitReadSlop)
            breakEnd2 = str(start2+splitReadSlop)
        elif (variant == "DEL" or variant == "INS" or variant == "GAP" or variant == "DUP" or variant == "DUP_OVERLAP"):
          if (variant == "DEL" or variant == "GAP"  or variant == "INS"):
            breakStart1 = str(max(0,end1-splitReadSlop))
            breakEnd1 = str(end1+splitReadSlop)
            breakStart2 = str(max(0,start2-splitReadSlop, end1-splitReadSlop))
            breakEnd2 = str(max(start2+splitReadSlop, end1+splitReadSlop))
            refOlap = str(min(0, start2-end1))
          elif variant == "DUP" or variant == "DUP_OVERLAP":
            breakStart1 = str(max(0, end1-splitReadSlop))
            breakEnd1 = str(end1+splitReadSlop)
            breakStart2 = str(max(0, start2-splitReadSlop))
            breakEnd2 = str(start2+splitReadSlop)
            #sys.stderr.write(str(breakStart1)+"\t"+str(breakEnd1)+'\n'+str(breakStart2)+'\t'+str(breakEnd2)+'\n')
          if breakStart1>breakStart2:
            breakStart1,breakStart2 = breakStart2,breakStart1
            breakEnd1,breakEnd2 = breakEnd2,breakEnd1
            #sys.stderr.write(str(breakStart1)+"\t"+str(breakEnd1)+'\n'+str(breakStart2)+'\t'+str(breakEnd2)+'\n')
        else:
            sys.stderr.write("ERROR: " + variant + " " + ID + " is lost in breakpoint locus prediction step. Contact Mitchell\n")
            sys.stderr.write(line)
        info=""
        if variant == "DEL":
            #print out deletion sequences to fasta
            #sys.stderr.write("get deletion sequence " + ".".join([strand1, strand2, chrom1, str(start1), str(end1), chrom2, str(start2), str(end2), ID, str(queryStart1), str(queryEnd1), str(queryStart2), str(queryEnd2)])+"\n")
            if (start2 < end1):
                variant = "D_OVERLAP"
            else:
                #deletion_sequence = getSequence(refFasta, chrom1, end1, start2)
                deletion_sequence = "DEL"
            if (variant == "DEL"):
                global next_deletion_sequence_name
                deletion_sequence_name = str(next_deletion_sequence_name)
                #del_length = len(deletion_sequence)
                del_length = start2 - end1
                next_deletion_sequence_name = next_deletion_sequence_name + 1
                printSequenceToFile(deletionOutputFasta, deletion_sequence_name, deletion_sequence)
                info = ";".join(["DEL="+deletion_sequence_name, "REF_OLAP="+refOlap, "SVLEN=-"+str(del_length), "RDIST="+str(rdist), "QDIST="+str(qdist), "ROVERLAP="+str(roverlap), "QOVERLAP="+str(qoverlap)])
        if variant == "INS":
            #print out insertion sequences to fasta
            #sys.stderr.write("get insertion sequence " + ".".join([strand1, strand2, chrom1, str(start1), str(end1), chrom2, str(start2), str(end2), ID, str(queryStart1), str(queryEnd1), str(queryStart2), str(queryEnd2)])+"\n")
            if (queryStart1 < queryStart2):
                if (queryStart2 < queryEnd1):
                    variant = "I_OVERLAP"
                else:
                    insertion_sequence = "INS" #getSequence(queryFasta, ID, queryEnd1, queryStart2)
            else:
                if (queryStart1 < queryEnd2):
                    variant= "I_OVERLAP"
                else:
                    insertion_sequence = "INS" #getSequence(queryFasta, ID, queryEnd2, queryStart1)
            if (variant == "INS"):
                global next_insertion_sequence_name
                insertion_sequence_name = str(next_insertion_sequence_name)
                next_insertion_sequence_name = next_insertion_sequence_name + 1
                printSequenceToFile(insertionOutputFasta, insertion_sequence_name, insertion_sequence)
                #ins_length = len(insertion_sequence)
                ins_length = queryStart2 - queryEnd1
                info = ";".join(["INS="+insertion_sequence_name, "REF_OLAP="+refOlap, "SVLEN="+str(ins_length), "RDIST="+str(rdist), "QDIST="+str(qdist), "ROVERLAP="+str(roverlap), "QOVERLAP="+str(qoverlap)])
        if variant == "GAP":
            #print out gap sequences to fasta
            #sys.stderr.write("get gap sequences " + ".".join([strand1, strand2, chrom1, str(start1), str(end1), chrom2, str(start2), str(end2), ID, str(queryStart1), str(queryEnd1), str(queryStart2), str(queryEnd2)])+"\n")
            if (start2 < end1):
                variant = "G_OVERLAP"
            else:
                gap_sequence_a = "GAPA" #getSequence(refFasta, chrom1, end1, start2)
                if (queryStart1 < queryStart2):
                    if (queryStart2 < queryEnd1):
                        variant = "G_OVERLAP"
                    else:
                        gap_sequence_b = "GAPB" #getSequence(queryFasta, ID, queryEnd1, queryStart2)
                else:
                    if (queryStart1 < queryEnd2):
                        variant = "G_OVERLAP"
                    else:
                        gap_sequence_b = "GAPB" #getSequence(queryFasta, ID, queryEnd2, queryStart1)
            if (variant == "GAP"):
                global next_gap_sequence_name
                gap_sequence_name = str(next_gap_sequence_name)
                next_gap_sequence_name = next_gap_sequence_name + 1
                printSequenceToFile(gapOutputFasta, ".".join([gap_sequence_name, "a"]), gap_sequence_a)
                printSequenceToFile(gapOutputFasta, ".".join([gap_sequence_name, "b"]), gap_sequence_b)
                #gap_length = len(gap_sequence_a)
                gap_length = start2 - end1
                info = ";".join(["GAP="+gap_sequence_name, "REF_OLAP="+refOlap, "SVLEN="+str(gap_length), "RDIST="+str(rdist), "QDIST="+str(qdist), "ROVERLAP="+str(roverlap), "QOVERLAP="+str(qoverlap)])
        if variant == 'DUP' or variant == 'INV':
          svlen = abs(rdist);
          #info = "SVLEN="+str(svlen)
          info = ';'.join(["SVLEN="+str(svlen), "RDIST="+str(rdist), "QDIST="+str(qdist), "ROVERLAP="+str(roverlap), "QOVERLAP="+str(qoverlap)])
        #if variant == 'INV':
        #  svlen = abs(rdist);
        #  info = "SVLEN="+str(svlen)
        if (info == ""):
            info = ';'.join(["RDIST="+str(rdist), "QDIST="+str(qdist), "ROVERLAP="+str(roverlap), "QOVERLAP="+str(qoverlap), "SVTYPE="+variant])
        else:
            info = ";".join([info, "SVTYPE="+variant])
        if (variant == "DEL" or variant == "D_OVERLAP"):
            if (queryStart1 < queryStart2):
                info = info+";"+"OVERLAP="+str(queryStart2-queryEnd1)
            else:
                info = info+";"+"OVERLAP="+str(queryStart1-queryEnd2)
        if flipped:
          strand1 = '+'
          strand2 = '+'
          queryStart1, queryStart2 = queryStart2, queryStart1
          queryEnd1, queryEnd2 = queryEnd2, queryEnd1
        print '\t'.join(map(str, [chrom1, breakStart1, breakEnd1, chrom2, breakStart2, breakEnd2, input_str, score, strand1, strand2, variant, "PASS", ID, queryStart1, queryEnd1, ID, queryStart2, queryEnd2, info, ".", minNonOverlap, queryLength, qualScores, variant]))

def main():
    usage = "%prog -b <bedpe> -c <contigFile.bedpe> [options]\nVersion: 0.2\nAuthor: Mitchell L. Leibowitz\nEdited: Aug, 2011 by Colby Chiang (details below)\n \
Note: Add slop at your own risk.\n\nPrints modified bedpe so bedpe entry 1 is always less than bedpe entry 2\n\nModified by GGF on 2/13/2012 to account for zero-base half-open coordinates."
    parser = OptionParser(usage)
    parser.add_option("-i", dest="contigFile", metavar="FILE", help="BEDPE file containing the split contigs; requires 10 column bedpe plus 11-14 as query coordinates, field 15 as query length \
and field 16 minimum non overlap.")
    parser.add_option("-s", dest="splitReadSlop", metavar="INT", type="int", default=1, help="Bidirectional slop around the breakpoint [default = 1]")
    parser.add_option("-r", dest="localRange", default=1000000, type="int", metavar="INT", help="the range of coordinates considered local (for breakpoint classification) [default = 1000000]; Calculated by subtracting field 6 from field 2.")
    parser.add_option("-f", dest="outputFastaBase", metavar="FILE", help="Basename for output fasta files (insertion and deletion sequences)")
    parser.add_option("-q", dest="queryFasta", metavar="FILE", help="Fasta file of query sequences to extract insertion sequences")
    parser.add_option("-e", dest="refFasta", metavar="FILE", help="Fasta file of ref sequences to extract deletion sequences")
    parser.add_option("-t", dest="threshold", metavar="INT", type="int", default=50, help="Minimum difference in inter-alignment lengths to call an SV vs an alignment gap")

    (opts, args) = parser.parse_args()

    if opts.contigFile is None:
        parser.print_help()
        print
    else:
        queryFasta = ""
        refFasta = ""
        #queryFasta = pysam.FastaFile(opts.queryFasta)
        #refFasta = pysam.FastaFile(opts.refFasta)
        insertionOutputFasta = open(".".join([opts.outputFastaBase, "insertion", "fa"]), 'w')
        deletionOutputFasta = open(".".join([opts.outputFastaBase, "deletion", "fa"]), 'w')
        gapOutputFasta = open(".".join([opts.outputFastaBase, "gap", "fa"]), 'w')
        splitterToBreakpoint(opts.contigFile, opts.splitReadSlop, opts.localRange, insertionOutputFasta, deletionOutputFasta, gapOutputFasta, queryFasta, refFasta, opts.threshold)
        insertionOutputFasta.close()
        deletionOutputFasta.close()
        gapOutputFasta.close()

if __name__ == "__main__":
        sys.exit(main())
